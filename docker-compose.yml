services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/inventory
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    platform: linux/arm64
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    networks:
      - stackr_network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - API_HOST=http://backend
      - API_PORT=8000
      - ENVIRONMENT=development
      - PYTHONUNBUFFERED=1
    depends_on:
      - backend
    platform: linux/arm64
    working_dir: /app/frontend
    command: streamlit run Home.py --server.port 8501 --server.address 0.0.0.0
    volumes:
      - .:/app
    networks:
      - stackr_network

  db:
    image: postgres:15.4-alpine
    platform: linux/arm64
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d inventory"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: postgres -c 'max_connections=100'
    networks:
      - stackr_network

networks:
  stackr_network:
    driver: bridge

volumes:
  postgres_data:
    name: stackr_postgres_data